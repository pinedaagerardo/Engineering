/*
 * Ptools.java
 *
 * Created on 27 de abril de 2007, 07:12 PM
 */

package Puzzle;

import java.awt.FileDialog;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JTable;
import javax.swing.JTextArea;

/**
 *
 * @author  ONIXX
 * Ventana con las 10 puntuaciones más altas y algunos métodos de archivos
 */
public class Ptools extends javax.swing.JFrame {
    final short x=40,y=70;
    
    
    /** Crea una ventana nueva para las 10 puntuaciones más altas */
    public Ptools() {
        initComponents();
        this.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        Baceptar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        Spiderman = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        scroll2 = new javax.swing.JScrollPane();
        StarWars = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        scroll3 = new javax.swing.JScrollPane();
        MetalGearSolid = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        scroll1 = new javax.swing.JScrollPane();
        Starfish = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        scroll4 = new javax.swing.JScrollPane();
        Matrix = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PUNTUACIONES");
        setAlwaysOnTop(true);
        setResizable(false);
        setUndecorated(true);
        Baceptar.setText("Aceptar");
        Baceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaceptarActionPerformed(evt);
            }
        });

        scroll.setFont(new java.awt.Font("Tahoma", 0, 14));
        Spiderman.setBackground(new java.awt.Color(187, 214, 241));
        Spiderman.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Spiderman.setFont(new java.awt.Font("Tahoma", 0, 14));
        Spiderman.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "JUGADOR", "MOVIMIENTOS", "TIEMPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Spiderman.setGridColor(new java.awt.Color(202, 221, 237));
        Spiderman.setShowVerticalLines(false);
        scroll.setViewportView(Spiderman);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(86, 86, 86)
                .add(scroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 394, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(216, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(scroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("", new javax.swing.ImageIcon(getClass().getResource("/Puzzle/img/Imagen1/ej.jpg")), jPanel1);

        scroll2.setFont(new java.awt.Font("Tahoma", 0, 14));
        StarWars.setBackground(new java.awt.Color(187, 214, 241));
        StarWars.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        StarWars.setFont(new java.awt.Font("Tahoma", 0, 14));
        StarWars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "JUGADOR", "MOVIMIENTOS", "TIEMPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        StarWars.setGridColor(new java.awt.Color(202, 221, 237));
        StarWars.setShowVerticalLines(false);
        scroll2.setViewportView(StarWars);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(86, 86, 86)
                .add(scroll2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 394, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(216, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(scroll2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("", new javax.swing.ImageIcon(getClass().getResource("/Puzzle/img/Imagen2/ej.jpg")), jPanel4);

        scroll3.setFont(new java.awt.Font("Tahoma", 0, 14));
        MetalGearSolid.setBackground(new java.awt.Color(187, 214, 241));
        MetalGearSolid.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MetalGearSolid.setFont(new java.awt.Font("Tahoma", 0, 14));
        MetalGearSolid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "JUGADOR", "MOVIMIENTOS", "TIEMPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MetalGearSolid.setGridColor(new java.awt.Color(202, 221, 237));
        MetalGearSolid.setShowVerticalLines(false);
        scroll3.setViewportView(MetalGearSolid);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(86, 86, 86)
                .add(scroll3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 394, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(216, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(scroll3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("", new javax.swing.ImageIcon(getClass().getResource("/Puzzle/img/Imagen3/ej.jpg")), jPanel5);

        scroll1.setFont(new java.awt.Font("Tahoma", 0, 14));
        Starfish.setBackground(new java.awt.Color(187, 214, 241));
        Starfish.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Starfish.setFont(new java.awt.Font("Tahoma", 0, 14));
        Starfish.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "JUGADOR", "MOVIMIENTOS", "TIEMPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Starfish.setGridColor(new java.awt.Color(202, 221, 237));
        Starfish.setShowVerticalLines(false);
        scroll1.setViewportView(Starfish);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(86, 86, 86)
                .add(scroll1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 394, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(216, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(scroll1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("", new javax.swing.ImageIcon(getClass().getResource("/Puzzle/img/Imagen4/ej.jpg")), jPanel2);

        scroll4.setFont(new java.awt.Font("Tahoma", 0, 14));
        Matrix.setBackground(new java.awt.Color(187, 214, 241));
        Matrix.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Matrix.setFont(new java.awt.Font("Tahoma", 0, 14));
        Matrix.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "JUGADOR", "MOVIMIENTOS", "TIEMPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Matrix.setGridColor(new java.awt.Color(202, 221, 237));
        Matrix.setShowVerticalLines(false);
        scroll4.setViewportView(Matrix);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(86, 86, 86)
                .add(scroll4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 394, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(216, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(scroll4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("", new javax.swing.ImageIcon(getClass().getResource("/Puzzle/img/Imagen5/ej.jpg")), jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(Baceptar))
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Baceptar)
                .addContainerGap(59, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**Oculta la ventana de las puntuaciones*/
    private void BaceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaceptarActionPerformed
        this.dispose();
    }//GEN-LAST:event_BaceptarActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ptools().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Baceptar;
    private javax.swing.JTable Matrix;
    private javax.swing.JTable MetalGearSolid;
    private javax.swing.JTable Spiderman;
    private javax.swing.JTable StarWars;
    private javax.swing.JTable Starfish;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scroll1;
    private javax.swing.JScrollPane scroll2;
    private javax.swing.JScrollPane scroll3;
    private javax.swing.JScrollPane scroll4;
    // End of variables declaration//GEN-END:variables

    /**Guarda un juego*/
    void guardar(cuadro[] Cuadro, byte vacio, boolean Jterminado, String carpetaImagen, byte segs, byte mins, byte hrs, int movs) {
        String NombreArchivo;
        try{
            FileDialog dlg = new FileDialog(this, "Guardar", FileDialog.SAVE);
            dlg.setVisible(true);                
            if(dlg.getFile() == null) return;
            if(dlg.getFile().toLowerCase().endsWith(".puz"))
                NombreArchivo = dlg.getDirectory() + dlg.getFile();
            else
                if(dlg.getFile().indexOf(".") != -1){
                    JOptionPane.showMessageDialog(this,"El nombre no puede tener otra extensión.\nAl escribir el archivo "+
                    "escribirlo con la extensión \".puz\" o no escribir extensión","Error de Escritura",JOptionPane.ERROR_MESSAGE);
                    return;
                }else
                    NombreArchivo = dlg.getDirectory() + dlg.getFile() + ".puz";
             
            PrintWriter output = new PrintWriter(new FileWriter(NombreArchivo));
            for(byte i=0;i<Cuadro.length;i++)
                output.print(Cuadro[(int)i].iconoActual);
            output.println(vacio);
            output.println(Jterminado);
            output.println(carpetaImagen);
            output.println(segs);
            output.println(mins);
            output.println(hrs);
            output.println(movs);
            output.close();            
        }catch(Exception e){}
    }
    
    /**Abre un juego guardado*/
    String abrir(JTextArea Texto){
        String NombreArchivo="";
        try{
            FileDialog dlg = new FileDialog(this, "Abrir", FileDialog.LOAD);            
            dlg.setVisible(true);
            if (dlg.getFile() == null) return null;            
            if(dlg.getFile().toLowerCase().endsWith(".puz"))
                NombreArchivo = dlg.getDirectory() + dlg.getFile();
            
            BufferedReader input = new BufferedReader(new FileReader(NombreArchivo));
            String text = "";            
            Texto.setText("");      
            while ((text = input.readLine()) != null){
                text = text + "\n";                
                Texto.append(text);
            }            
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"Error","Error",JOptionPane.ERROR_MESSAGE);
        }
        return NombreArchivo;
    }

    /**Si el jugador tiene un tiempo entre los mejores 10, lo agrega a los
     * punteos altos (llama al método updateTabla).
     */
    void ponerEnPuntajes(String nombre, String tiempo, String carpetaImagen, int movs) {
        String archivo = "c:/Puzzle/punteo"+carpetaImagen;
        
        char numero = carpetaImagen.charAt(carpetaImagen.length()-1);
        switch (numero){
            case '1':
                updateTabla(archivo,Spiderman,nombre,tiempo,movs);
                break;
            case '2':
                updateTabla(archivo,StarWars,nombre,tiempo,movs);
                break;
            case '3':
                updateTabla(archivo,MetalGearSolid,nombre,tiempo,movs);
                break;
            case '4':
                updateTabla(archivo,Starfish,nombre,tiempo,movs);
                break;
            case '5':
                updateTabla(archivo,Matrix,nombre,tiempo,movs);
                break;
        }
    }

    /**Actualiza y ordena la tabla y el archivo de punteos que corresponde*/
    private void updateTabla(String file, JTable tabla, String nombre, String tiempo, int movs) {
        File tmp = new File(file);
        int fila = 0;
        
        limpiarTabla(tabla);
        
        //cargando la tabla, encontrando el lugar que corresponde para el
        //nuevo punteo y asignándoselo a 'fila'.
        if(tmp.exists()){
            try{
                int tmpT=0,tTN=0;
                int indice=0;
                tTN = Integer.parseInt( tiempo.substring( indice,(indice=tiempo.indexOf(":")) ) ) * 3600;
                tTN += Integer.parseInt( tiempo.substring( indice+1,(indice=tiempo.indexOf(":",indice+1)) ) ) * 60;
                tTN += Integer.parseInt( tiempo.substring( indice+1 ) );
                BufferedReader in = new BufferedReader(new FileReader(file));
                
                //cargando tabla...
                String primeraLinea;
                for(int i=0;(primeraLinea=in.readLine())!=null;i++){
                    tabla.setValueAt(primeraLinea,i,0);
                    tabla.setValueAt(in.readLine(),i,1);
                    tabla.setValueAt(in.readLine(),i,2);
                }
                
                //encontrando nueva posicion y asignando valor a 'fila'...
                int i=0;
                boolean encontrado=false;
                for(i=0;i<tabla.getRowCount();i++){
                    try{
                        int tmpIndice=0;
                        tmpT = Integer.parseInt( tabla.getValueAt(i,2).toString().substring( tmpIndice,(tmpIndice=tabla.getValueAt(i,2).toString().indexOf(":")) ) ) * 3600;
                        tmpT += Integer.parseInt( tabla.getValueAt(i,2).toString().substring( tmpIndice+1,(tmpIndice=tabla.getValueAt(i,2).toString().indexOf(":",tmpIndice+1)) ) ) * 60;
                        tmpT += Integer.parseInt( tabla.getValueAt(i,2).toString().substring( tmpIndice+1 ) );
                    }catch(IndexOutOfBoundsException ex){
                        encontrado=true;
                        fila=i;
                        break;
                    }
                    
                    if(tTN<tmpT){
                        fila=i;
                        encontrado=true;
                        break;
                    }
                }
                
                //si no es una de las 10 mejores puntuaciones, se sale del
                //método y no toca ni la tabla, ni el archivo.
                if(encontrado==false) return;
                
            }catch(IOException ex) {}
        }
        
        //corriendo los datos en la tabla (si es necesario)
        for(int i=tabla.getRowCount()-1;i>fila;i--){
            tabla.setValueAt(tabla.getValueAt(i-1,0),i,0);
            tabla.setValueAt(tabla.getValueAt(i-1,1),i,1);
            tabla.setValueAt(tabla.getValueAt(i-1,2),i,2);
        }
       //agregando los nuevos valores en la fila indicada por la variable 'fila'
        tabla.setValueAt((nombre.length()==0)?"Anonimo":nombre,fila,0);
        tabla.setValueAt(movs,fila,1);
        tabla.setValueAt(tiempo,fila,2);
       
        //actualizando el archivo de punteos para esa imagen
        try {
            PrintWriter out = new PrintWriter(new FileWriter(file));
            
            for(int f=0;f<tabla.getRowCount()&&tabla.getValueAt(f,1)!=" ";f++){
                out.println(tabla.getValueAt(f,0).toString());
                out.println(tabla.getValueAt(f,1).toString());
                out.println(tabla.getValueAt(f,2).toString());
            }
            out.close();
        } catch (IOException ex) {}
    }

    /**Carga las puntuaciones en las tablas (si existe algun punteo).
     *Este método lo invoca la clase Puzzle al entrar a Puntuaciones
     */
    void cargarPuntuaciones() {
        File archivo=new File("c:/Puzzle/punteoImagen1");
        
        try{
            if(archivo.exists()){
                BufferedReader in = new BufferedReader(new FileReader(archivo));
                String primeraLinea;
                for(int i=0;(primeraLinea=in.readLine())!=null;i++){
                    Spiderman.setValueAt(" "+primeraLinea,i,0);
                    Spiderman.setValueAt(in.readLine(),i,1);
                    Spiderman.setValueAt(in.readLine(),i,2);
                }
            }
            
            archivo=new File("c:/Puzzle/punteoImagen2");
            if(archivo.exists()){
                BufferedReader in = new BufferedReader(new FileReader(archivo));
                String primeraLinea;
                for(int i=0;(primeraLinea=in.readLine())!=null;i++){
                    StarWars.setValueAt(" "+primeraLinea,i,0);
                    StarWars.setValueAt(in.readLine(),i,1);
                    StarWars.setValueAt(in.readLine(),i,2);
                }
            }
            
            archivo=new File("c:/Puzzle/punteoImagen3");
            if(archivo.exists()){
                BufferedReader in = new BufferedReader(new FileReader(archivo));
                String primeraLinea;
                for(int i=0;(primeraLinea=in.readLine())!=null;i++){
                    MetalGearSolid.setValueAt(" "+primeraLinea,i,0);
                    MetalGearSolid.setValueAt(in.readLine(),i,1);
                    MetalGearSolid.setValueAt(in.readLine(),i,2);
                }
            }
            
            archivo=new File("c:/Puzzle/punteoImagen4");
            if(archivo.exists()){
                BufferedReader in = new BufferedReader(new FileReader(archivo));
                String primeraLinea;
                for(int i=0;(primeraLinea=in.readLine())!=null;i++){
                    Starfish.setValueAt(" "+primeraLinea,i,0);
                    Starfish.setValueAt(in.readLine(),i,1);
                    Starfish.setValueAt(in.readLine(),i,2);
                }
            }
            
            archivo=new File("c:/Puzzle/punteoImagen5");
            if(archivo.exists()){
                BufferedReader in = new BufferedReader(new FileReader(archivo));
                String primeraLinea;
                for(int i=0;(primeraLinea=in.readLine())!=null;i++){
                    Matrix.setValueAt(" "+primeraLinea,i,0);
                    Matrix.setValueAt(in.readLine(),i,1);
                    Matrix.setValueAt(in.readLine(),i,2);
                }
            }
            
        }catch(IOException ex) {}
    }

    /**llena la tabla de " " para evitar el NullPointerException*/
    private void limpiarTabla(JTable tabla) {
        for(int i=0;i<tabla.getRowCount();i++)
            for(int j=0;j<tabla.getColumnCount();j++){
                tabla.setValueAt(" ",i,j);
            }
    }

    /**Genera los reportes de todos los juegos que se han ganado*/
    void reportar(int movs, String tiempo, String carpetaImagen, String nombre) {
        char numero = carpetaImagen.charAt(carpetaImagen.length()-1);
        switch (numero){
            case '1':
                carpetaImagen="Spiderman";
                break;
            case '2':
                carpetaImagen="Star Wars";
                break;
            case '3':
                carpetaImagen="Metal Gear Solid";
                break;
            case '4':
                carpetaImagen="Starfish";
                break;
            case '5':
                carpetaImagen="Matrix";
                break;
        }
        if(nombre.length()==0) nombre="Anonimo";
        try{
            Calendar f = Calendar.getInstance();
            String fecha=Integer.toString(f.get(f.DAY_OF_MONTH))+"-"+Integer.toString(f.get(f.MONTH)+1)+"-"+Integer.toString(f.get(f.YEAR));
            String hora=Integer.toString(f.get(f.HOUR))+":"+Integer.toString(f.get(f.MINUTE))+":"+Integer.toString(f.get(f.SECOND));
            File archivo = new File("c:/Puzzle/Reportes.html"),datos = new File("c:/Puzzle/Rdatos");
            PrintWriter out = new PrintWriter(new FileWriter(archivo)), R = new PrintWriter(new FileWriter(datos,true));
            
            R.println("<tr align=center><td>"+nombre+"</td><td>"+carpetaImagen+"</td><td>"+movs+"</td><td>"+tiempo+"</td><td>"+fecha+"</td><td>"+hora+"</td></tr>");
            R.close();
            
            BufferedReader in = new BufferedReader(new FileReader(datos));
            JTextArea Texto=new JTextArea();
            String text = "";            
            Texto.setText("");      
            while ((text = in.readLine()) != null){
                text = text + "\n";                
                Texto.append(text);
            }
            
            out.println("<html><head><title>Reportes</title></head><body bgcolor=\"#97D7FD\"><h2 align=center>REPORTES</h2><p>&nbsp;<p><center><table border=1>"
            +"<tr align=center><td>JUGADOR</td><td>ROMPECABEZAS ARMADO</td><td>MOVIMIENTOS</td><td>TIEMPO</td><td>FECHA</td><td>HORA</td></tr>"+Texto.getText()+"</table></center></body></html>");
            out.close();
            
        }catch(Exception e){}
    }

    
}
