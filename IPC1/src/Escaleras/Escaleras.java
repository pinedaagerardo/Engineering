/*
 * Escaleras.java
 *
 * Created on 3 de mayo de 2007, 12:20 PM
 */

package Escaleras;

import com.sun.org.apache.bcel.internal.classfile.JavaClass;
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JTextArea;
import javax.swing.Timer;

/**
 *
 * @author  ONIXX
 */
public class Escaleras extends javax.swing.JFrame {
    final byte posX=30,posY=posX,wi=40,he=wi;//para casillas
    final byte Jx=posX+11,Jy=posY+11,Jw=22,Jh=Jw;//para jugador
    final String direccion="/Escaleras/img";
    
    /** Crea el juego Escaleras. Llama al método cargarIconos(). */
    public Escaleras() {
        initComponents();
        scrollAyuda.setVisible(false);
        TAinstrucciones.setVisible(false);
        Binstrucciones.setVisible(false);
        Lpos.setText("");
        Lfecha.setText("");
        Lhora.setText("");
        Pjugadores.setVisible(false);
        reloj.start();
        Limpiar();
        this.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
        File Escaleras=new File("c:/Escaleras");
        if(!Escaleras.exists()) Escaleras.mkdir();
        cargarIconos();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        Ljugador = new javax.swing.JLabel();
        dado = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        Lcasilla = new javax.swing.JLabel();
        Lpos = new javax.swing.JLabel();
        Lpenal = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        L2jugador = new javax.swing.JLabel();
        Llanzamientos = new javax.swing.JLabel();
        Lfecha = new javax.swing.JLabel();
        Lhora = new javax.swing.JLabel();
        Pjugadores = new javax.swing.JPanel();
        BagregarJugador = new javax.swing.JButton();
        Bterminar = new javax.swing.JButton();
        BborrarTodos = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        TnombreJugador = new javax.swing.JTextField();
        LnombreJugador = new javax.swing.JLabel();
        scrollAyuda = new javax.swing.JScrollPane();
        TAinstrucciones = new javax.swing.JTextArea();
        Binstrucciones = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mJuego = new javax.swing.JMenu();
        mCargar = new javax.swing.JMenuItem();
        mJugar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        mSalir = new javax.swing.JMenuItem();
        mVer = new javax.swing.JMenu();
        mPosiciones = new javax.swing.JMenuItem();
        mAyuda = new javax.swing.JMenu();
        mAcercaDe = new javax.swing.JMenuItem();
        mIndicaciones = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Serpientes y Escaleras");
        setResizable(false);
        setUndecorated(true);
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setFocusable(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(150, 290));
        jPanel1.setRequestFocusEnabled(false);
        Ljugador.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Ljugador.setText("JUGADOR");

        dado.setFont(new java.awt.Font("Tahoma", 0, 48));
        dado.setForeground(new java.awt.Color(0, 59, 176));
        dado.setText("0");
        dado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dado.setEnabled(false);
        dado.setFocusPainted(false);
        dado.setFocusable(false);
        dado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dado.setIconTextGap(0);
        dado.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dado.setMaximumSize(new java.awt.Dimension(80, 80));
        dado.setMinimumSize(new java.awt.Dimension(80, 80));
        dado.setPreferredSize(new java.awt.Dimension(80, 80));
        dado.setRequestFocusEnabled(false);
        dado.setRolloverEnabled(false);
        dado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dadoMouseClicked(evt);
            }
        });

        jLabel1.setLabelFor(dado);
        jLabel1.setText("TIRAR");

        Lcasilla.setText("Casilla");

        Lpos.setText("pos. memoria");

        Lpenal.setText("Penalizacion");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(Lcasilla)
                .addContainerGap(105, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(Lpos)
                .addContainerGap(71, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(Lpenal)
                .addContainerGap(77, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(34, 34, 34)
                .add(dado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(59, 59, 59)
                .add(jLabel1)
                .addContainerGap(55, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(Ljugador, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(Ljugador)
                .add(17, 17, 17)
                .add(dado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .add(25, 25, 25)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Lcasilla)
                .add(17, 17, 17)
                .add(Lpos)
                .add(19, 19, 19)
                .add(Lpenal)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jLabel5.setText("Jugador:");

        jLabel6.setText("Lanzamientos:");

        jLabel7.setText("Fecha:");

        jLabel8.setText("Hora:");

        L2jugador.setText("jLabel2");

        Llanzamientos.setText("jLabel3");

        Lfecha.setText("jLabel4");

        Lhora.setText("jLabel9");

        Pjugadores.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(123, 162, 215), 10));
        BagregarJugador.setText("Agregar");
        BagregarJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BagregarJugadorActionPerformed(evt);
            }
        });

        Bterminar.setText("Terminar");
        Bterminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BterminarActionPerformed(evt);
            }
        });

        BborrarTodos.setText("Borrar Todos");
        BborrarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BborrarTodosActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabel2.setText("JUGADORES");

        LnombreJugador.setLabelFor(TnombreJugador);
        LnombreJugador.setText("Jugador:");

        org.jdesktop.layout.GroupLayout PjugadoresLayout = new org.jdesktop.layout.GroupLayout(Pjugadores);
        Pjugadores.setLayout(PjugadoresLayout);
        PjugadoresLayout.setHorizontalGroup(
            PjugadoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PjugadoresLayout.createSequentialGroup()
                .add(163, 163, 163)
                .add(jLabel2)
                .addContainerGap(143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, PjugadoresLayout.createSequentialGroup()
                .add(PjugadoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(PjugadoresLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(BagregarJugador)
                        .add(37, 37, 37)
                        .add(Bterminar)
                        .add(37, 37, 37)
                        .add(BborrarTodos))
                    .add(PjugadoresLayout.createSequentialGroup()
                        .add(34, 34, 34)
                        .add(LnombreJugador)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(TnombreJugador, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)))
                .add(35, 35, 35))
        );
        PjugadoresLayout.setVerticalGroup(
            PjugadoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PjugadoresLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .add(33, 33, 33)
                .add(PjugadoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(TnombreJugador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(LnombreJugador))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                .add(PjugadoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Bterminar)
                    .add(BborrarTodos)
                    .add(BagregarJugador))
                .add(28, 28, 28))
        );

        TAinstrucciones.setColumns(20);
        TAinstrucciones.setEditable(false);
        TAinstrucciones.setLineWrap(true);
        TAinstrucciones.setRows(5);
        TAinstrucciones.setText("INSTRUCCIONES:\n-EMPEZAR UN JUEGO:\n\nLo primero es cargar el tablero:\n\tEntrar a: menu juego>cargar.\n\nDespues de haber seleccionado el tablero con extension '.esc'\nse puede iniciar el juego:\n\tEntrar a: menu juego>jugar.\n\nIngresar los jugadores escribiendo su nombre y presionando el\nboton para agregarlos al juego, y cuando ya esten todos\nagregados, presionar el boton terminar. (el boton borrar todos\nborra todos los jugadores ingresados)\n\nYa se puede jugar.\n\n-REGLAS:\n\nPara tirar hay que presionar el boton grande en la esquina\nsuperior derecha.\n\nSi alguien cae en una casilla con penalizacion, se ejecuta\nla penalizacion y si la casilla destino tiene penalizacion,\nno se ejecuta porque ya se ejecuto una anterior.\n\nSignificado de las casillas:\n\tcasilla con un dado: tiros extras.\n\tcasilla con una escalera: avanzar x posiciones.\n\tcasilla con una serpiente: retroceder x posiciones.\n\tcasilla sin dibujo: Sin penalizacion.\n\tcasilla verde: Inicio.\n\tcasilla cafe: Final.\n\tcasilla gris: No es parte del tablero.\n\nLos jugadores solo se mueven en las casillas que son parte\ndel tablero.\n\nGana el que llegue primero a la casilla final.\n\n*para ver los reportes, abrir los documentos *.html ubicados\nen 'c:\\Escaleras\\'");
        TAinstrucciones.setWrapStyleWord(true);
        scrollAyuda.setViewportView(TAinstrucciones);

        Binstrucciones.setText("Esconder");
        Binstrucciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BinstruccionesActionPerformed(evt);
            }
        });

        mJuego.setText("Juego");
        mCargar.setText("Cargar");
        mCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCargarActionPerformed(evt);
            }
        });

        mJuego.add(mCargar);

        mJugar.setText("Jugar");
        mJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mJugarActionPerformed(evt);
            }
        });

        mJuego.add(mJugar);

        mJuego.add(jSeparator2);

        mSalir.setText("Salir");
        mSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSalirActionPerformed(evt);
            }
        });

        mJuego.add(mSalir);

        jMenuBar1.add(mJuego);

        mVer.setText("Ver");
        mPosiciones.setText("Posiciones");
        mPosiciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mPosicionesActionPerformed(evt);
            }
        });

        mVer.add(mPosiciones);

        jMenuBar1.add(mVer);

        mAyuda.setText("Ayuda");
        mAcercaDe.setText("Acerca De");
        mAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAcercaDeActionPerformed(evt);
            }
        });

        mAyuda.add(mAcercaDe);

        mIndicaciones.setText("Indicaciones de Uso");
        mIndicaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mIndicacionesActionPerformed(evt);
            }
        });

        mAyuda.add(mIndicaciones);

        jMenuBar1.add(mAyuda);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel5)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(L2jugador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 316, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                                .add(Llanzamientos)
                                .add(58, 58, 58)
                                .add(jLabel7)
                                .add(19, 19, 19)
                                .add(Lfecha)
                                .add(23, 23, 23))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(Pjugadores, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(98, 98, 98)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel8)
                                .add(17, 17, 17)
                                .add(Lhora))
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 149, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(layout.createSequentialGroup()
                            .addContainerGap()
                            .add(scrollAyuda, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 515, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(564, 564, 564)
                            .add(Binstrucciones))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 295, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(103, 103, 103)
                        .add(Pjugadores, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(8, 8, 8)
                .add(scrollAyuda, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 334, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Binstrucciones)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 33, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(Llanzamientos)
                    .add(jLabel6)
                    .add(L2jugador)
                    .add(jLabel8)
                    .add(Lhora)
                    .add(jLabel7)
                    .add(Lfecha))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BinstruccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BinstruccionesActionPerformed
        scrollAyuda.setVisible(false);
        TAinstrucciones.setVisible(false);
        Binstrucciones.setVisible(false);
    }//GEN-LAST:event_BinstruccionesActionPerformed

    private void mIndicacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mIndicacionesActionPerformed
        scrollAyuda.setVisible(true);
        TAinstrucciones.setVisible(true);
        Binstrucciones.setVisible(true);
    }//GEN-LAST:event_mIndicacionesActionPerformed

    private void mAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAcercaDeActionPerformed
        JOptionPane.showMessageDialog(this,"Hecho por Gerardo Pineda\nCarnet: 2006-11226\nIPC1","Datos",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mAcercaDeActionPerformed

    /**Abre la ventana de las posiciones.*/
    private void mPosicionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mPosicionesActionPerformed
        reportes.setVisible(true);
        reportes.cargarPosiciones(tmpCargar);
    }//GEN-LAST:event_mPosicionesActionPerformed

    private void mSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSalirActionPerformed
        JOptionPane pane=new JOptionPane("Salir al menu?",JOptionPane.QUESTION_MESSAGE,JOptionPane.YES_NO_OPTION);
        JDialog dialog=pane.createDialog(this,"Salida");
        dialog.setDefaultCloseOperation(dialog.DO_NOTHING_ON_CLOSE);
        dialog.setVisible(true);
        Object s=pane.getValue();
        if(((Integer)s).intValue()==pane.NO_OPTION)return;
        else this.dispose();
    }//GEN-LAST:event_mSalirActionPerformed

    /**Si ya se escogió un tablero, comienza un juego nuevo y abre el panel para
     * agregar los jugadores.
     * Invoca Limpiar()
     */
    private void mJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mJugarActionPerformed
        if(!cc.estaVacia()){
            if(Player.existenJugadores()){
                JOptionPane pane=new JOptionPane("El juego actual se va a terminar; continuar?",JOptionPane.QUESTION_MESSAGE,JOptionPane.YES_NO_OPTION);
                JDialog dialog=pane.createDialog(this,"Nuevo Juego");
                dialog.setDefaultCloseOperation(dialog.DO_NOTHING_ON_CLOSE);
                dialog.setVisible(true);
                Object s=pane.getValue();
                if(((Integer)s).intValue()==pane.NO_OPTION)return;
            }
            reiniciarJuego();
            Pjugadores.setVisible(true);
            TnombreJugador.requestFocus();
        }
        else
            JOptionPane.showMessageDialog(this,"Escoger un tablero antes de empezar.","Error",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_mJugarActionPerformed

    /**Hace visibles a los jugadores agregados, los agrega al form,
     * los posiciona, invoca ActualizarJuego() y esconde el panel para agregar
     * jugadores.
     */
    private void BterminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BterminarActionPerformed
        for(Jugador tmp=Player.jugadorActual();tmp!=null;tmp=tmp.Siguiente){
            add(tmp,0);
            tmp.setBounds(Jx+((tmp.casillaActual.columna-1)*wi),Jy+((tmp.casillaActual.fila-1)*he),Jw,Jh);
            tmp.setVisible(true);
            tmp.repaint();
        }
        if(Player.existenJugadores())
            ActualizarJuego();
        Pjugadores.setVisible(false);
    }//GEN-LAST:event_BterminarActionPerformed

    /**Si el usuario confirma, borra todos los jugadores que se han agregado a
     * esta partida.
     */
    private void BborrarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BborrarTodosActionPerformed
        JOptionPane pane=new JOptionPane("Borrar de este juego a todos los jugadores que se ingresaron?",JOptionPane.QUESTION_MESSAGE,JOptionPane.YES_NO_OPTION);
        JDialog dialog=pane.createDialog(this,"Borrar Jugadores");
        dialog.setDefaultCloseOperation(dialog.DO_NOTHING_ON_CLOSE);
        dialog.setVisible(true);
        Object s=pane.getValue();
        if(((Integer)s).intValue()==pane.NO_OPTION)return;
        else{
            Player.borrarTodos();
            TnombreJugador.setText("");
            TnombreJugador.requestFocusInWindow();
        }
    }//GEN-LAST:event_BborrarTodosActionPerformed

    /**Si el tablero tiene casilla de inicio, agrega un nuevo jugador a la cola
     * con sus atributos, pero no lo hace visible, ni lo agrega al form
     * ni lo posiciona. (ver BterminarActionPerformed)
     */
    private void BagregarJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BagregarJugadorActionPerformed
        if(TnombreJugador.getText().length()!=0){
            for(Casilla ctmp=cc.primera();ctmp!=null;ctmp=ctmp.sig)
                if(ctmp.getIcon()==icono[0]){
                    if(Player.nuevoJugador(TnombreJugador.getText(),ctmp,Jicono)){
                        TnombreJugador.setText("");
                        TnombreJugador.requestFocusInWindow();
                    }else{
                        JOptionPane.showMessageDialog(this,"El jugador ya existe.","Jugador Repetido",JOptionPane.ERROR_MESSAGE);
                        TnombreJugador.requestFocusInWindow();
                        TnombreJugador.selectAll();
                    }

                    return;
                }
            JOptionPane.showMessageDialog(this,"El archivo no tiene registros de una posición de inicio.\n"+
            "Para poder jugar, cargar otro tablero","Error grave de archivo",JOptionPane.ERROR_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this,"No se ha escrito el jugador","Error",JOptionPane.ERROR_MESSAGE);
            TnombreJugador.requestFocusInWindow();
        }
    }//GEN-LAST:event_BagregarJugadorActionPerformed

    /**Abre una ventana para escoger el archivo que tiene los datos del tablero
     * que se va a usar. Después llama al método crearTablero().
     */
    private void mCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCargarActionPerformed
        if(!cc.estaVacia()){
            JOptionPane pane=new JOptionPane("El juego actual se va a terminar; continuar?",JOptionPane.QUESTION_MESSAGE,JOptionPane.YES_NO_OPTION);
            JDialog dialog=pane.createDialog(this,"Cargar Tablero");
            dialog.setDefaultCloseOperation(dialog.DO_NOTHING_ON_CLOSE);
            dialog.setVisible(true);
            Object s=pane.getValue();
            if(((Integer)s).intValue()==pane.NO_OPTION)return;
        }
        
        try{
            FileDialog dlg = new FileDialog(this, "Escoger tablero", FileDialog.LOAD);            
            dlg.setVisible(true);
            if (dlg.getFile() == null) return;            
            if(dlg.getFile().toLowerCase().endsWith(".esc"))
                tablero = new File(dlg.getDirectory() + dlg.getFile());
            else{
                JOptionPane.showMessageDialog(this,"El archivo no es valido; tiene que ser tipo \"*.esc\" para ser valido.\nEl juego va a cerrarse.","Error grave de carga",JOptionPane.ERROR_MESSAGE);
                this.dispose();
            }

        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"Error","Error",JOptionPane.ERROR_MESSAGE);
        }
        reiniciarJuego();
        crearTablero();
    }//GEN-LAST:event_mCargarActionPerformed

    /**Genera un número aleatorio entre 0 y 4 para el dado.
     *Después bloquea el dado para que no tiren hasta que sea habilitado otra
     *vez (se habilita cuando ya le toque al otro jugador).
     *También invoca MoverJugador(int), ActualizarJuego() y actualiza datos de
     *la cola y del Jugador actual.
     */
    private void dadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dadoMouseClicked
        if(dado.isEnabled()){
            byte tmp=0;
            while( !(tmp>0) || !(tmp<5) || Byte.toString(tmp).equals(dado.getText()) )
                tmp = (byte)(Math.random()*10);
            dado.setText(Byte.toString(tmp));
            dado.setEnabled(false);
            
            Player.jugadorActual().Lanzamientos++;
            
            if( existeCasilla( Integer.parseInt(dado.getText())+Player.jugadorActual().casillaActual.nombre ) )
                MoverJugador(Integer.parseInt(dado.getText()));
            else JOptionPane.showMessageDialog(this,"Demasiados Pasos!!","Posicion afuera del tablero",JOptionPane.INFORMATION_MESSAGE);
            
            if(!permitirPenalizaciones && Player.jugadorActual().casillaActual.penalizacion.toLowerCase().startsWith("f")){
                ActualizarJuego();
                terminarJuego();
            }
            
            if(!juegoTerminado)
                if(turnosExtra==0){
                    Player.jugadorSiguiente();
                    permitirPenalizaciones=true;
                } else turnosExtra--;
            
            ActualizarJuego();
        }
    }//GEN-LAST:event_dadoMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Escaleras().setVisible(true);
            }
        });
    }

    /**Crea cada casilla del tablero leyendo de un archivo.
     * Le asigna a cada una su penalización, ubicación y sus propiedades.
     */
    private void crearTablero() {
        cc.borrarTodas();
        char letra='A';
        tmpCargar.setText("");
        try{
            BufferedReader in=new BufferedReader(new FileReader(tablero));
            String t="";
            while((t=in.readLine())!=null)
                tmpCargar.append(t+"\n");
        }catch(Exception ex){}
        int cont=1;
        
        for(int x=0;x<15;x++){
            letra='A';
            for(int y=0;y<15;y++,letra++){
                int start;
                if((start=(tmpCargar.getText().indexOf(String.valueOf(letra)+","+String.valueOf((int)x+(int)1)+",")!=-1)?tmpCargar.getText().indexOf(String.valueOf(letra)+","+String.valueOf((int)x+(int)1)+","):tmpCargar.getText().indexOf(String.valueOf(letra).toLowerCase()+","+String.valueOf((int)x+(int)1)+","))!=-1){
                    int ind=tmpCargar.getText().indexOf(",",tmpCargar.getText().indexOf(",",start)+1)+1;
                    String p;
                    try{
                        remove(casilla[x][y]);
                    }catch(NullPointerException ex){}
                    casilla[x][y] = new Casilla(y+1,x+1,tmpCargar.getText().substring(ind,(ind=tmpCargar.getText().indexOf(",",ind))),p=tmpCargar.getText().substring(ind+1,(ind=tmpCargar.getText().indexOf(",",ind+1))),Integer.parseInt(tmpCargar.getText().substring(ind+1,tmpCargar.getText().indexOf("\n",ind+1))),(p.equalsIgnoreCase("adelante"))?icono[4]:(p.equalsIgnoreCase("inicio"))?icono[0]:(p.toLowerCase().startsWith("f"))?icono[1]:(p.equalsIgnoreCase("tirar"))?icono[5]:(p.equalsIgnoreCase("igual"))?icono[2]:icono[3],cont++);
                    cc.addCasilla(casilla[x][y],(p.equalsIgnoreCase("adelante"))?icono[4]:(p.equalsIgnoreCase("inicio"))?icono[0]:(p.toLowerCase().startsWith("f"))?icono[1]:(p.equalsIgnoreCase("tirar"))?icono[5]:(p.equalsIgnoreCase("igual"))?icono[2]:icono[3]);
                }
                else{
                    try{
                        remove(casilla[x][y]);
                    }catch(NullPointerException ex){}
                    casilla[x][y] = new Casilla(y+1,x+1,Integer.toString(-1),"igual",0,null,-1);
                }
                casilla[x][y].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                casilla[x][y].setBounds(posX+(y*wi),posY+(x*he),wi,he);
                add(casilla[x][y]);
                casilla[x][y].setVisible(true);
                casilla[x][y].repaint();
            }
            if(x==14) break;
            x++;letra='A'+14;
            for(int y=14;y>=0;y--,letra--){
                int start;
                if((start=(tmpCargar.getText().indexOf(String.valueOf(letra)+","+String.valueOf((int)x+(int)1)+",")!=-1)?tmpCargar.getText().indexOf(String.valueOf(letra)+","+String.valueOf((int)x+(int)1)+","):tmpCargar.getText().indexOf(String.valueOf(letra).toLowerCase()+","+String.valueOf((int)x+(int)1)+","))!=-1){
                    int ind=tmpCargar.getText().indexOf(",",tmpCargar.getText().indexOf(",",start)+1)+1;
                    String p;
                    try{
                        remove(casilla[x][y]);
                    }catch(NullPointerException ex){}
                    casilla[x][y] = new Casilla(y+1,x+1,tmpCargar.getText().substring(ind,(ind=tmpCargar.getText().indexOf(",",ind))),p=tmpCargar.getText().substring(ind+1,(ind=tmpCargar.getText().indexOf(",",ind+1))),Integer.parseInt(tmpCargar.getText().substring(ind+1,tmpCargar.getText().indexOf("\n",ind+1))),(p.equalsIgnoreCase("adelante"))?icono[4]:(p.equalsIgnoreCase("inicio"))?icono[0]:(p.toLowerCase().startsWith("f"))?icono[1]:(p.equalsIgnoreCase("tirar"))?icono[5]:(p.equalsIgnoreCase("igual"))?icono[2]:icono[3],cont++);
                    cc.addCasilla(casilla[x][y],(p.equalsIgnoreCase("adelante"))?icono[4]:(p.equalsIgnoreCase("inicio"))?icono[0]:(p.toLowerCase().startsWith("f"))?icono[1]:(p.equalsIgnoreCase("tirar"))?icono[5]:(p.equalsIgnoreCase("igual"))?icono[2]:icono[3]);
                }
                else{
                    try{
                        remove(casilla[x][y]);
                    }catch(NullPointerException ex){}
                    casilla[x][y] = new Casilla(y+1,x+1,Integer.toString(-1),"igual",0,null,-1);
                }
                casilla[x][y].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                casilla[x][y].setBounds(posX+(y*wi),posY+(x*he),wi,he);
                add(casilla[x][y]);
                casilla[x][y].setVisible(true);
                casilla[x][y].repaint();
            }
        }
        
        Casilla c=cc.primera();
        while(c!=null){
            if(c.penalizacion.equalsIgnoreCase("inicio")) break;
            else
                if(c.penalizacion.toLowerCase().startsWith("f")){
                    cc.crearPila(cont-1);
                    break;
                }
            c=c.sig;
        }
        
    }

    /**Carga las imágenes para los íconos de cada casilla, pero no los
     *asigna, solo los carga.
     * @Indice 0 = inicio;
     * @Indice 1 = fin;
     * @Indice 2 = normal;
     * @Indice 3 = serpiente;
     * @Indice 4 = escalera;
     * @Indice 5 = tirar;
     */
    private void cargarIconos() {
        for(int i=0;i<icono.length;i++)
            icono[i]=new ImageIcon(getClass().getResource(direccion+"/i" + i + ".jpg"));
    }

    /**Actualiza los labels con los datos del jugador actual y activa el dado
     * para que el jugador actual pueda tirar si es que el juego no ha terminado
     */
    private void ActualizarJuego() {
        Ljugador.setText(Player.jugadorActual().Nombre);
        L2jugador.setText(Ljugador.getText());
        Llanzamientos.setText(String.valueOf(Player.jugadorActual().Lanzamientos));
        Lcasilla.setText(String.valueOf(Player.jugadorActual().casillaActual.nombre));
        if(Player.jugadorActual().casillaActual.penalizacion.equalsIgnoreCase("adelante")||Player.jugadorActual().casillaActual.penalizacion.toLowerCase().startsWith("atr"))
            Lpenal.setText(Player.jugadorActual().casillaActual.etiqueta+"- Mover "+Player.jugadorActual().casillaActual.cantidad+" "+Player.jugadorActual().casillaActual.penalizacion);
        else 
            if(Player.jugadorActual().casillaActual.penalizacion.equalsIgnoreCase("tirar"))
                Lpenal.setText(Player.jugadorActual().casillaActual.etiqueta+"- Tirar "+Player.jugadorActual().casillaActual.cantidad+" más");
            else
                if(Player.jugadorActual().casillaActual.penalizacion.equalsIgnoreCase("igual"))
                    Lpenal.setText(Player.jugadorActual().casillaActual.etiqueta+"- Ninguna");
                else
                    Lpenal.setText(Player.jugadorActual().casillaActual.etiqueta+"- "+Player.jugadorActual().casillaActual.penalizacion);
        if(!juegoTerminado)
            dado.setEnabled(true);
    }

    /**Limpia los labels que llevan datos de los jugadores y reinicia las
     * variables necesarias para que el juego funcione bien (turnosExtra,
     * juegoTerminado y permitirPenalizaciones).
     */
    private void Limpiar() {
        turnosExtra=0;permitirPenalizaciones=true;juegoTerminado=false;
        Ljugador.setText("");
        L2jugador.setText("");
        Llanzamientos.setText("");
        Lcasilla.setText("");
        Lpenal.setText("");
        dado.setEnabled(false);
        dado.setText("0");
    }

    /**Hace que el Jugador se mueva hacia la casilla que indica el parámetro
     * cantidad, invocando Caminar(int,int).
     * Después invoca Penalización(), cuando el Jugador llego a su Casilla
     * destino.
     */
    private void MoverJugador(int cantidad) {
        int limite=Player.jugadorActual().casillaActual.nombre + cantidad;
        Player.jugadorActual().casillaActual=Caminar(limite,500);
        if(permitirPenalizaciones)
            Penalizacion();
    }
    
    /**Mueve al Jugador a la Casilla que tenga el nombre del parámetro 
     * nombreCasilla. También retorna la casilla a la que se movió el Jugador.
     */
    private Casilla Caminar(int nombreCasilla,int espera) {
        for(Casilla ctmp=cc.primera();ctmp!=null;ctmp=ctmp.sig)
            if(ctmp.nombre==nombreCasilla){
                Player.jugadorActual().setLocation(Jx+((ctmp.columna-1)*wi),Jy+((ctmp.fila-1)*he));
                Player.jugadorActual().repaint();
                return ctmp;
            }
        return null;//Esto nunca se ejecuta porque la casilla siempre va a existir; si no existiera ni siquiera entraría a éste método.
    }

    /**Retorna true solo si existe una Casilla con el nombre del parámetro i*/
    private boolean existeCasilla(int i) {
        for(Casilla ctmp=cc.primera();ctmp!=null;ctmp=ctmp.sig)
            if(ctmp.nombre==i) return true;
        return false;
    }

    /**Hace la penalización de la Casilla actual al Jugador que esté en ella
     * solo si no hay penalizaciones activas.
     */
    private void Penalizacion() {
        String penalizacion=Player.jugadorActual().casillaActual.penalizacion;
        int cantidad=Player.jugadorActual().casillaActual.cantidad,nombre=Player.jugadorActual().casillaActual.nombre;
        
        if(penalizacion.equalsIgnoreCase("adelante"))
            if(nombre+cantidad>0 && existeCasilla(nombre+cantidad)){
                JOptionPane.showMessageDialog(this,"Moverse "+cantidad+" adelante","Penalizacion",JOptionPane.INFORMATION_MESSAGE);
                Player.jugadorActual().casillaActual=Caminar(nombre+cantidad,1000);
            }
            else JOptionPane.showMessageDialog(this,"La casilla destino no existe en este tablero. La penalizacion no coincide con el tablero.\nEl archivo de entrada esta mal.","Error grave",JOptionPane.ERROR_MESSAGE);
        else
            if(penalizacion.toLowerCase().startsWith("atr"))
                if(nombre-cantidad>0 && existeCasilla(nombre-cantidad)){
                    JOptionPane.showMessageDialog(this,"Moverse "+cantidad+" atras","Penalizacion",JOptionPane.INFORMATION_MESSAGE);
                    Player.jugadorActual().casillaActual=Caminar(nombre-cantidad,1000);
                }
                else JOptionPane.showMessageDialog(this,"La casilla destino no existe en este tablero. La penalizacion no coincide con el tablero.\nEl archivo de entrada esta mal.","Error grave",JOptionPane.ERROR_MESSAGE);
            else
                if(penalizacion.equalsIgnoreCase("tirar"))
                    if(cantidad>0){
                        JOptionPane.showMessageDialog(this,"Tirar "+cantidad+" extra","Penalizacion",JOptionPane.INFORMATION_MESSAGE);
                        turnosExtra=cantidad;
                        permitirPenalizaciones=false;
                    }
                    else JOptionPane.showMessageDialog(this,"No puede ser negativa la cantidad. El archivo de entrada esta mal.","Error grave",JOptionPane.ERROR_MESSAGE);
                else
                    if(penalizacion.toLowerCase().startsWith("f"))
                        terminarJuego();
        if(Player.jugadorActual().casillaActual.penalizacion.toLowerCase().startsWith("f") && !juegoTerminado)
            permitirPenalizaciones=false;
    }
    
    /**Borra todos los Jugadores del juego y de la cola. Después invoca
     * Limpiar().
     */
    private void reiniciarJuego(){
        for(Jugador tmp=Player.primerJugador();tmp!=null;tmp=tmp.Siguiente){remove(tmp);}
        Player.borrarTodos();
        Limpiar();
    }

    /**Termina el juego*/
    private void terminarJuego() {
        juegoTerminado=true;
        dado.setEnabled(false);
        JOptionPane.showMessageDialog(this,"Juego Terminado.\nGanador: "+Player.jugadorActual().Nombre,"Terminado",JOptionPane.INFORMATION_MESSAGE);
        
        JTextArea oponentes = new JTextArea();
        for(Jugador tmp=Player.primerJugador();tmp!=null;tmp=tmp.Siguiente){
            if(!tmp.Nombre.equalsIgnoreCase(Player.jugadorActual().Nombre))
                oponentes.append(tmp.Nombre + ",");
        }
        
        try{
            reportes.HacerReportes(Player.jugadorActual().Nombre,Player.jugadorActual().Lanzamientos,Lfecha.getText(),Lhora.getText(),(oponentes.getText().length()==0)?"Ninguno":oponentes.getText(0,oponentes.getText().length()-1));
        }catch(Exception ex){JOptionPane.showMessageDialog(null,ex.getMessage());}
    }
    
    Timer reloj = new Timer(1000,new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Calendar clock=Calendar.getInstance();
                segs=clock.get(clock.SECOND);
                mins=clock.get(clock.MINUTE);
                hrs=clock.get(clock.HOUR);
                dia=clock.get(clock.DATE);
                mes=clock.get(clock.MONTH)+1;
                anho=clock.get(clock.YEAR);
                
                Lhora.setText(hrs+":"+mins+":"+segs);
                Lfecha.setText(dia+"/"+mes+"/"+anho);
            }
        });
    
    JTextArea tmpCargar = new JTextArea();
    int segs,mins,hrs,dia,mes,anho,turnosExtra=0;
    boolean permitirPenalizaciones=true,juegoTerminado=false;
    ImageIcon Jicono=new ImageIcon(getClass().getResource(direccion+"/Jugador.jpg"));
    controlCasilla cc = new controlCasilla();
    Casilla casilla[][] = new Casilla[15][15];
    ImageIcon icono[] = new ImageIcon[6];
    ControlJugadores Player = new ControlJugadores();
    File tablero;
    Etools reportes = new Etools();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BagregarJugador;
    private javax.swing.JButton BborrarTodos;
    private javax.swing.JButton Binstrucciones;
    private javax.swing.JButton Bterminar;
    private javax.swing.JLabel L2jugador;
    private javax.swing.JLabel Lcasilla;
    private javax.swing.JLabel Lfecha;
    private javax.swing.JLabel Lhora;
    private javax.swing.JLabel Ljugador;
    private javax.swing.JLabel Llanzamientos;
    private javax.swing.JLabel LnombreJugador;
    private javax.swing.JLabel Lpenal;
    private javax.swing.JLabel Lpos;
    private javax.swing.JPanel Pjugadores;
    private javax.swing.JTextArea TAinstrucciones;
    private javax.swing.JTextField TnombreJugador;
    private javax.swing.JButton dado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem mAcercaDe;
    private javax.swing.JMenu mAyuda;
    private javax.swing.JMenuItem mCargar;
    private javax.swing.JMenuItem mIndicaciones;
    private javax.swing.JMenu mJuego;
    private javax.swing.JMenuItem mJugar;
    private javax.swing.JMenuItem mPosiciones;
    private javax.swing.JMenuItem mSalir;
    private javax.swing.JMenu mVer;
    private javax.swing.JScrollPane scrollAyuda;
    // End of variables declaration//GEN-END:variables
    
}
