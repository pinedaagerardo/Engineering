/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Ini.java
 *
 * Created on 7/05/2010, 03:24:34 PM
 */

package proy2;

import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author elzher
 */
public class Ini extends javax.swing.JFrame {

    /** Creates new form Ini */
    public Ini() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        chB_borrar = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Usuario:");

        jLabel2.setText("Contraseña:");

        jButton1.setText("Entrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        chB_borrar.setText("Reiniciar tablas");
        chB_borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chB_borrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(chB_borrar))
                .addContainerGap(89, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(204, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(181, 181, 181))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(32, 32, 32)
                .addComponent(chB_borrar)
                .addGap(33, 33, 33)
                .addComponent(jButton1)
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Menu m;
        String u=jTextField1.getText(),p=jTextField2.getText();
        //ver si la contraseña esta bien:
        Conexion con=new Conexion();
        
        if(con.abrir(u, p)){
            if(chB_borrar.isSelected()){
                ResultSet rs=con.executeQ("select * from user_tables");
                try{
                    if(rs.next()){//tablas existen, borrar
                        con.execute("drop TRIGGER \"TRG_AUTO_AREA\"");
                        con.execute("drop TRIGGER \"TRG_AUTO_CLI\"");
                        con.execute("drop TRIGGER \"TRG_AUTO_CON\"");
                        con.execute("drop TRIGGER \"TRG_AUTO_LIC\"");
                        con.execute("drop TRIGGER \"TRG_AUTO_PROD\"");
                        con.execute("drop TRIGGER \"TRG_AUTO_VEN\"");

                        con.execute("drop SEQUENCE \"SEQ_AUTO_AREA\"");
                        con.execute("drop SEQUENCE \"SEQ_AUTO_CLI\"");
                        con.execute("drop SEQUENCE \"SEQ_AUTO_CON\"");
                        con.execute("drop SEQUENCE \"SEQ_AUTO_LIC\"");
                        con.execute("drop SEQUENCE \"SEQ_AUTO_PROD\"");
                        con.execute("drop SEQUENCE \"SEQ_AUTO_VEN\"");

                        con.execute("delete from \"CASO\"");
                        con.execute("delete from \"VENTA\"");
                        con.execute("delete from \"PRODUCTO\"");
                        con.execute("delete from \"LICENCIA\"");
                        con.execute("delete from \"CLIENTE\"");
                        con.execute("delete from \"CONSULTOR\"");
                        con.execute("delete from \"AREA\"");
/*
                        con.execute("drop TABLE \"CASO\"");
                        con.execute("drop TABLE \"VENTA\"");
                        con.execute("drop TABLE \"PRODUCTO\"");
                        con.execute("drop TABLE \"LICENCIA\"");
                        con.execute("drop TABLE \"CLIENTE\"");
                        con.execute("drop TABLE \"CONSULTOR\"");
                        con.execute("drop TABLE \"AREA\"");
                        //crear
                        con.execute("CREATE TABLE Area(idArea    NUMBER(10, 0)    NOT NULL,nombre    VARCHAR2(80)     NOT NULL,CONSTRAINT PK2 PRIMARY KEY (idArea));");
                        con.execute("create TABLE Caso(idCaso                   NUMBER(10, 0)    NOT NULL,consultor_idConsultor    NUMBER(10, 0)    NOT NULL,area_idArea              NUMBER(10, 0)    NOT NULL,producto_idProducto      NUMBER(10, 0)    NOT NULL,cliente_idCliente        NUMBER(10, 0)    NOT NULL,contacto                 VARCHAR2(80),inicio                   VARCHAR2(80),versionSO                VARCHAR2(80),severidad                VARCHAR2(80),descripcion              VARCHAR2(80),estado                   VARCHAR2(80),actualizado              VARCHAR2(80),detalle                  VARCHAR2(80),CONSTRAINT PK7 PRIMARY KEY (idCaso, consultor_idConsultor, area_idArea, producto_idProducto, cliente_idCliente));");
                        con.execute("create TABLE Cliente(idCliente    NUMBER(10, 0)    NOT NULL,sector       VARCHAR2(80),nombre       VARCHAR2(80),direccion    VARCHAR2(80),contacto     VARCHAR2(80),puesto       VARCHAR2(80),email        VARCHAR2(80),admin        VARCHAR2(1),tecnico      VARCHAR2(1),CONSTRAINT PK8 PRIMARY KEY (idCliente));");
                        con.execute("create TABLE Consultor(idConsultor    NUMBER(10, 0)    NOT NULL,area_idArea    NUMBER(10, 0)    NOT NULL,nombres        VARCHAR2(80),email          VARCHAR2(80),CONSTRAINT PK6 PRIMARY KEY (idConsultor, area_idArea));");
                        con.execute("create TABLE Licencia(idLicencia           NUMBER(10, 0)    NOT NULL,cliente_idCliente    NUMBER(10, 0)    NOT NULL,producto             VARCHAR2(80),sistOperativo        VARCHAR2(80),tipo                 VARCHAR2(80),cantUsuarios         NUMBER(10, 0),inicio               VARCHAR2(80),fin                  VARCHAR2(80),CONSTRAINT PK10 PRIMARY KEY (idLicencia, cliente_idCliente));");
                        con.execute("create TABLE Producto(idProducto     NUMBER(10, 0)    NOT NULL,area_idArea    NUMBER(10, 0)    NOT NULL,nombre         VARCHAR2(80),CONSTRAINT PK3 PRIMARY KEY (idProducto, area_idArea));");
                        con.execute("create TABLE Venta(idVenta                NUMBER(10, 0)    NOT NULL,cliente_idCliente      NUMBER(10, 0)    NOT NULL,producto_idProducto    NUMBER(10, 0)    NOT NULL,area_idArea            NUMBER(10, 0)    NOT NULL,licencia_idLicencia    NUMBER(10, 0)    NOT NULL,unidades               NUMBER(10, 0),sistOperativo          VARCHAR2(80),inicio                 VARCHAR2(80),fin                    VARCHAR2(80),CONSTRAINT PK9 PRIMARY KEY (idVenta, cliente_idCliente, producto_idProducto, area_idArea, licencia_idLicencia));");
                        //TABLE: Caso
                        con.execute("ALTER TABLE Caso ADD CONSTRAINT RefConsultor6 FOREIGN KEY (consultor_idConsultor, area_idArea)REFERENCES Consultor(idConsultor, area_idArea) ON DELETE CASCADE;");
                        con.execute("ALTER TABLE Caso ADD CONSTRAINT RefProducto7 FOREIGN KEY (producto_idProducto, area_idArea)REFERENCES Producto(idProducto, area_idArea) ON DELETE CASCADE;");
                        con.execute("ALTER TABLE Caso ADD CONSTRAINT RefCliente8 FOREIGN KEY (cliente_idCliente)REFERENCES Cliente(idCliente) ON DELETE CASCADE;");
                        //TABLE: Consultor
                        con.execute("ALTER TABLE Consultor ADD CONSTRAINT RefArea5 FOREIGN KEY (area_idArea)REFERENCES Area(idArea) ON DELETE CASCADE;");
                        //TABLE: Licencia
                        con.execute("ALTER TABLE Licencia ADD CONSTRAINT RefCliente11 FOREIGN KEY (cliente_idCliente)REFERENCES Cliente(idCliente) ON DELETE CASCADE;");
                        //TABLE: Producto
                        con.execute("ALTER TABLE Producto ADD CONSTRAINT RefArea4 FOREIGN KEY (area_idArea)REFERENCES Area(idArea) ON DELETE CASCADE;");
                        //TABLE: Venta
                        con.execute("ALTER TABLE Venta ADD CONSTRAINT RefCliente9 FOREIGN KEY (cliente_idCliente)REFERENCES Cliente(idCliente) ON DELETE CASCADE;");
                        con.execute("ALTER TABLE Venta ADD CONSTRAINT RefProducto10 FOREIGN KEY (producto_idProducto, area_idArea)REFERENCES Producto(idProducto, area_idArea) ON DELETE CASCADE;");
                        con.execute("ALTER TABLE Venta ADD CONSTRAINT RefLicencia12 FOREIGN KEY (licencia_idLicencia, cliente_idCliente)REFERENCES Licencia(idLicencia, cliente_idCliente) ON DELETE CASCADE;");
*/
                        con.execute("create SEQUENCE \"SEQ_AUTO_AREA\"");
                        con.execute("create SEQUENCE \"SEQ_AUTO_CLI\"");
                        con.execute("create SEQUENCE \"SEQ_AUTO_CON\"");
                        con.execute("create SEQUENCE \"SEQ_AUTO_LIC\"");
                        con.execute("create SEQUENCE \"SEQ_AUTO_PROD\"");
                        con.execute("create SEQUENCE \"SEQ_AUTO_VEN\"");

                        con.execute("create TRIGGER \"TRG_AUTO_AREA\" before insert on Area for each row\nbegin\nselect SEQ_AUTO_AREA.nextval into :new.idArea from dual;\nend;");
                        con.execute("create TRIGGER \"TRG_AUTO_CLI\" before insert on Cliente for each row\nbegin\nselect SEQ_AUTO_CLI.nextval into :new.idCliente from dual;\nend;");
                        con.execute("create TRIGGER \"TRG_AUTO_CON\" before insert on Consultor for each row\nbegin\nselect SEQ_AUTO_CON.nextval into :new.idConsultor from dual;\nend;");
                        con.execute("create TRIGGER \"TRG_AUTO_LIC\" before insert on Licencia for each row\nbegin\nselect SEQ_AUTO_LIC.nextval into :new.idLicencia from dual;\nend;");
                        con.execute("create TRIGGER \"TRG_AUTO_PROD\" before insert on Producto for each row\nbegin\nselect SEQ_AUTO_PROD.nextval into :new.idProducto from dual;\nend;");
                        con.execute("create TRIGGER \"TRG_AUTO_VEN\" before insert on Venta for each row\nbegin\nselect SEQ_AUTO_VEN.nextval into :new.idVenta from dual;\nend;");
                        
                    }
                }catch(Exception e){
                    e.printStackTrace();
                }
                JOptionPane.showMessageDialog(this, "tablas reiniciadas");
            }
            con.cerrar(); 
            //si hay conexion:
            Abc abc=new Abc();
            abc.borrar();
            abc.log("Se ha conectado el usuario "+u);
            m=new Menu();
            m.inicio(u,p);
            m.setVisible(true);
            this.setVisible(false);
        }else
            JOptionPane.showMessageDialog(this, "Datos incorrectos");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void chB_borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chB_borrarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chB_borrarActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ini().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chB_borrar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

}
