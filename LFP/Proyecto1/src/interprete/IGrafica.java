/*
 * IGrafica.java
 *
 * Created on 23 de septiembre de 2007, 11:28 PM
 */

package interprete;

import interprete.Listas.Nodo;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.table.DefaultTableModel;

/**
 * Esta clase es la interfaz grafica del interprete
 * @author  gerardo
 */
public class IGrafica extends javax.swing.JFrame {
    
    /** Crea un nuevo form IGrafica */
    public IGrafica() {
        initComponents();
        this.setBounds(100,100,675,575);
        this.getRootPane().setWindowDecorationStyle(JRootPane.FILE_CHOOSER_DIALOG);
        tabla.setModel(modelo);
        tools.limpiarTabla(tabla,modelo);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        scrollTabla = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        ScrollEditor = new javax.swing.JScrollPane();
        editor = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        mOpciones = new javax.swing.JMenu();
        mAbrir = new javax.swing.JMenuItem();
        mCompilar = new javax.swing.JMenuItem();
        mCorrer = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        mSalir = new javax.swing.JMenuItem();
        mAyuda = new javax.swing.JMenu();
        mAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interprete");
        setLocationByPlatform(true);
        setResizable(false);
        setUndecorated(true);
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Descripcion", "Linea", "Posicion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });

        scrollTabla.setViewportView(tabla);

        editor.setColumns(20);
        editor.setRows(5);
        editor.setCaretColor(new java.awt.Color(102, 153, 255));
        editor.setRequestFocusEnabled(false);
        ScrollEditor.setViewportView(editor);

        mOpciones.setText("Opciones");
        mAbrir.setText("Abrir");
        mAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAbrirActionPerformed(evt);
            }
        });

        mOpciones.add(mAbrir);

        mCompilar.setText("Compilar");
        mCompilar.setEnabled(false);
        mCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCompilarActionPerformed(evt);
            }
        });

        mOpciones.add(mCompilar);

        mCorrer.setText("Correr");
        mCorrer.setEnabled(false);
        mCorrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCorrerActionPerformed(evt);
            }
        });

        mOpciones.add(mCorrer);

        mOpciones.add(jSeparator1);

        mSalir.setText("Salir");
        mSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSalirActionPerformed(evt);
            }
        });

        mOpciones.add(mSalir);

        jMenuBar1.add(mOpciones);

        mAyuda.setText("Ayuda");
        mAcercaDe.setText("Acerca De");
        mAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAcercaDeActionPerformed(evt);
            }
        });

        mAyuda.add(mAcercaDe);

        jMenuBar1.add(mAyuda);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(39, 39, 39)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, ScrollEditor)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, scrollTabla, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(31, 31, 31)
                .add(ScrollEditor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 329, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollTabla, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mCorrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCorrerActionPerformed
        Calculador c=new Calculador();
        c.Escribir(parser.vectorResultados,parser.archivoSalida,parser.colaConjuntos,this);
    }//GEN-LAST:event_mCorrerActionPerformed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        if(errores){ //se activa solo si hay errores en el archivo de entrada
            int posicion,fila=1; //para navegar en el texto
            for(posicion=0;fila<Integer.valueOf(tabla.getValueAt(tabla.getSelectedRow(),2).toString());posicion++)
                if(editor.getText().charAt(posicion)=='\n') fila++;
            editor.setCaretPosition(posicion+Integer.valueOf(String.valueOf(tabla.getValueAt(tabla.getSelectedRow(),3))));
            try{
                if(analisis=='l')
                    editor.select(editor.getCaretPosition(),editor.getCaretPosition()+scanner.varCola_error.Buscar(Integer.valueOf(tabla.getValueAt(tabla.getSelectedRow(),2).toString()),Integer.valueOf(tabla.getValueAt(tabla.getSelectedRow(),3).toString())).length());
                else
                    editor.select(editor.getCaretPosition(),editor.getCaretPosition()+parser.colaError.Buscar(Integer.valueOf(tabla.getValueAt(tabla.getSelectedRow(),2).toString()),Integer.valueOf(tabla.getValueAt(tabla.getSelectedRow(),3).toString())).length());
            }catch(Exception e){
                tools.mensaje(this,e,"Error al localizar un lexema erroneo en el editor","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_tablaMouseClicked

    private void mAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAcercaDeActionPerformed
        tools.mensaje(this,null,"PROYECTO 1\nHecho por:\nNombre: Gerardo Pineda\nCarnet: 2006-11226","Acerca De",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mAcercaDeActionPerformed

    private void mSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSalirActionPerformed
        if(tools.preguntar(this,"Salir?","Salida")) System.exit(0);
    }//GEN-LAST:event_mSalirActionPerformed

    private void mCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCompilarActionPerformed
        tools.mostrarArchivo(this,editor,scanner.varArchivo);
        analisis='l';
        mCorrer.setEnabled(false);
        tools.limpiarTabla(tabla,modelo);
        errores=true;
        Nodo nodo_tmp=scanner.analizar(this);
        try{
            tools.mostrarDatos(scanner.varCola_error.getNodo(),tabla,modelo);
        }catch(Exception e){
            analisis='s';
            parser.analizar(this,nodo_tmp);
            try{
                tools.mostrarDatos(parser.colaError.getNodo(),tabla,modelo);
            }catch(Exception e2){
                mCorrer.setEnabled(true);
                errores=false;
                modelo.addRow(new Object[]{null,"Hecho.",null,null});
            }
        }
    }//GEN-LAST:event_mCompilarActionPerformed

    private void mAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAbrirActionPerformed
        if(scanner.abrir(this,editor)){
            mCompilar.setEnabled(true);
            tools.limpiarTabla(tabla,modelo);
        }
    }//GEN-LAST:event_mAbrirActionPerformed
    
    /**
     * @param args los argumentos de la linea de comandos
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IGrafica().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollEditor;
    private javax.swing.JTextArea editor;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem mAbrir;
    private javax.swing.JMenuItem mAcercaDe;
    private javax.swing.JMenu mAyuda;
    private javax.swing.JMenuItem mCompilar;
    private javax.swing.JMenuItem mCorrer;
    private javax.swing.JMenu mOpciones;
    private javax.swing.JMenuItem mSalir;
    private javax.swing.JScrollPane scrollTabla;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
    
    /** Atributo tipo Tool */
    Tool tools=new Tool();
    
    /** Atributo tipo Scan */
    Scan scanner=new Scan();
    
    /** Atributo tipo Parse */
    Parse parser=new Parse();
    
    /** Atributo que indica si el analisis esta en la parte lexica o sintactica (l o s).
     * Es usado por los metodos tablaMouseClicked y mCompilarActionPerformed
     */
    char analisis;
    
    /**Atributo que indica si hay errores en el archivo de entrada o no.
     *El metodo tablaMouseClicked se puede activar solo si este atributo es true
     */
    boolean errores;
    
    /** Modelo que usa la tabla. */
    DefaultTableModel modelo=new DefaultTableModel(new Object [][] {}, new String [] {"No.", "Descripcion", "Linea", "Posicion"}){
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    
}
